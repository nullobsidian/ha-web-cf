Description: >
    Moses Marquez / ha-web-cf

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    S3BucketName:
        Description: The name of S3 bucket where bucket website content
        Type: String

Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALlow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  S3CustomRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal:
              Service:
              - s3.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3cp-webapp
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: !Sub arn:aws:s3:::${S3BucketName}/* 
      Roles:
        - !Ref S3CustomRole

  DefaultInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref S3CustomRole

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli openssh-server -y
          apt-get install apache2 -y
          ufw allow ssh
          if [ ! -d "$HOME/.aws" ]; then mkdir -p $HOME/.aws/
          echo '[profile s3role]' > ~/.aws/config
          echo 'role_arn = arn:aws:iam::${AWS::AccountId}:role/S3CustomRole' >> ~/.aws/config
          echo 'credential_source = Ec2InstanceMetadata' >> ~/.aws/config
          if [ ! -d "$HOME/.ssh" ]; then mkdir -p $HOME/.ssh/
          aws s3 cp s3://${S3BucketName}/keys/id_rsa.pub /tmp/ --profile s3role
          cat /tmp/id_rsa.pub > ~/.ssh/authorized_keys
          chown 700 ~/.ssh/ && chown 644 ~/.ssh/authorized_keys
          cd /var/www/html
          aws s3 cp s3://${S3BucketName}/website.zip . --profile s3role
          unzip -o website.zip
      ImageId: ami-003634241a8fcdec0 
      InstanceType: t3.small
      IamInstanceProfile: !Ref DefaultInstanceProfile
      SecurityGroups:
        - Ref: WebServerSecGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 15
  
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MaxSize: '6'
      MinSize: '2'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB3-SN"
      SecurityGroups:
        - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            Ref: WebAppTargetGroup
      LoadBalancerArn: 
        Ref: WebAppLB
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"

Outputs:
  
  LBDns:
      Description: "The DNS name for the load balancer."
      Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ]]
      Export:
          Name: Loadbalancer-URL